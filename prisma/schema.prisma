
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  name      String?
  image     String?
  bio       String?
  website   String?
  location  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  posts   Post[]
  commnts Comment[]
  likes   Like[]

  followers Follows[] @relation("follower")
  following Follows[] @relation("following")

  notifications        Notification[] @relation("userNotifications")
  notificationsCreated Notification[] @relation("notificationCreator")
  emailVerified        Boolean
  sessions             Session[]
  accounts             Account[]

  @@map("user")
}

model Post {
  id        String   @id @default(cuid())
  authorId  String
  content   String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
}

model Comment {
  id            String         @id @default(cuid())
  content       String
  authorId      String
  postId        String
  createdAt     DateTime       @default(now())
  notifications Notification[]

  //Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([authorId, postId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  //Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId, postId])
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  //Relations
  follower  User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@index([followerId, followingId])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  creatorId String
  type      NotificationType
  read      Boolean          @default(false)
  postId    String
  commentId String
  createdAt DateTime         @default(now())

  //Relations
  user    User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
